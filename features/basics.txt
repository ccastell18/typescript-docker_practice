Type = easy way to refer to the different properties and functions that a value has
value = anything that can be assigned to a variable.

Primitive Types- numbers, booleans, void, undefined, string, symbol, null
Object Types = functions, arrays, classes, objects

Types are used by typescript compiler to analyze our code for errors
Types allow other engineers to understand what values are flowing around our codebase


Type Annotations + Type Inference
Type Annotations = code we add to tell Typescript what type of value a variable will refer to
Type Inference = Typescript tries to figure out what type of value a variable refers to

variable declaration         variable initialization
    const color        =              'red'


Type annotations for functions = Code we add to tell Typescript what type of arguments a function will receive and what type of values it will returns

Type inference for functions = Typescript tries to figure out what type of value a function will return 

Typed Arrays = Arrays where each element is some consistent type of value


TS can do type inference when extracting values from an array.
TS can prevent us from adding incompatible values to the array.
We can get help with 'map', 'forEach', 'reduce' functions
Flexible - arrays can still contain multiple different types 

tuples vs arrays
tuple- array like structure where each element represents some property of a record

Interfaces
interfaces - creates a new type, describing the property names and value types of objects